//gradle测试
//class HelloWorldPlugin implements Plugin<Project> {
//
//    @Override
//    void apply(Project target) {
//        println "Hello World"
//    }
//}
//
//apply plugin: HelloWorldPlugin
import com.bryansharp.gradle.hibeaver.utils.Log
import com.bryansharp.gradle.hibeaver.utils.MethodLogAdapter
import org.objectweb.asm.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jakewharton.hugo'
//apply plugin: 'com.tencent.qgame.cain.gradle'
def threadOptimize = false
if (threadOptimize) {
    apply plugin: 'hiBeaver'
//or you can import like bellow:
//import org.objectweb.asm.*
    hiBeaver {
        //下面这个参数仅仅影响log输出，为本次修改命名，无实际意义，不配置也可以
        hiBeaverModifyName = 'myHibeaverTest'
        //设置为true可以显示帮助内容，默认为true
        showHelp = true
        //keepQuiet默认为false,为true时不会有字节码修改的log输出，建议为false
        keepQuiet = false
        //下面的参数设置为true时会输出工程编译耗时信息
        watchTimeConsume = false

        //重头戏是配置下面的参数：modifyMatchMaps
        //基础配置结构形如： ['class':[[:],[:]],'class':[[:],[:]]], 类型是 Map<String, List<Map<String, Object>>>
        modifyMatchMaps = [
                //此处可以进行模糊匹配，!表示排除，!android*即表示排除掉android开头的全类名。
                //|符号不完全表示或，而仅仅是匹配的分隔符。*表示任意长度（>0）的任意字符
                '*Test': [
                        //methodDesc设置为空代表对methodDesc不进行限制
                        //方法名也可以用模糊匹配 用javap -s 命令来查看类中方法的description
                        ['methodName': '*', 'methodDesc': null, 'adapter': {
                            ClassVisitor cv, int access, String name, String desc, String signature, String[] exceptions ->
                                MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions)
                                MethodVisitor adapter = new MethodLogAdapter(methodVisitor) {
                                    @Override
                                    void visitMethodInsn(int opcode, String owner, String n, String d) {
                                        println("---into visitMethodInsn, opcode = " + opcode + ", owner = " + owner + ", name = " + n + ", desc = " + d)
                                        if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Thread") && n.equals("start") && d.equals("()V")) {
                                            println("MATCHED visitMethodInsn, opcode = " + opcode + ", owner = " + owner + ", name = " + n + ", desc = " + d)

//                                        super.visitMethodInsn(Opcodes.INVOKESTATIC,
//                                                "cain/tencent/com/androidexercisedemo/utils/ThreadManagerWrapper",
//                                                "start",
//                                                "(Ljava/lang/Thread;)V",
//                                                false)
                                            super.visitMethodInsn(Opcodes.INVOKESTATIC,
                                                    "cain/tencent/com/androidexercisedemo/utils/ThreadManagerWrapper",
                                                    "start",
                                                    "(Ljava/lang/Runnable;)V",
                                                    false)
                                        } else {
                                            super.visitMethodInsn(opcode, owner, n, d)
                                        }
                                    }

                                    @Override
                                    void visitCode() {
                                        super.visitCode()
                                    }
                                }
                                return adapter
                        }]
                ]
        ]
    }

}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "cain.tencent.com.androidexercisedemo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //开启MultiDex
        multiDexEnabled true

        externalNativeBuild {
            // -Wno-deprecated-declarations 添加这个保证编译出的很多文件不再报错
            cmake {
                cppFlags "-frtti -fexceptions -Wno-deprecated-declarations"
                cFlags "-DSTDC_HEADERS"
            }
        }
        ndk {
            abiFilters "armeabi-v7a"
            ldLibs "log" //实现__android_log_print
        }
    }

    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }

    signingConfigs {
        release {
            android.signingConfigs.release.storePassword = 'jiangyu12315'
            android.signingConfigs.release.keyPassword = 'jiangyu12315'
        }
    }

    buildTypes {
        release {
            //shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //debug版
        debug {
            minifyEnabled false
            zipAlignEnabled false
            debuggable true
        }

//        staging {
//            applicationIdSuffix ".cain"
//            versionNameSuffix "-staging"
//        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/cpp/']
            jniLibs.srcDirs = ['libs']
        }
    }

    dataBinding {
        enabled = true
    }


    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", dependsOn: variant.install) {
            description "Install the ${variant.description} and runs the main launcher activity"
            doFirst {
                exec {
                    executable = 'adb'
                    args = ['shell', 'am', 'start', '-n', "${variant.applicationId}/.MyMainActivity"]
                }
            }
        }
    }
}


kapt {
    generateStubs = true
}

configurations {
    cleanedAnnotations
    compile.exclude group: 'org.jetbrains', module: 'annotations'
//    compile.exclude group: 'org.aspectj', module: 'annotation'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //support库
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.supportLibVersion}"

    // anko
    implementation "org.jetbrains.anko:anko-sdk25:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-appcompat-v7:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-design:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-recyclerview-v7:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-constraint-layout:${rootProject.ankoVersion}"

    // fresco
    implementation "com.facebook.fresco:fresco:${rootProject.fresco_version}"
    implementation "com.facebook.fresco:animated-gif:${rootProject.fresco_version}"
    implementation "com.facebook.fresco:animated-webp:${rootProject.fresco_version}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.rx_java_version}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.rx_android_version}"

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation project(':lintrulsaar')

    //dataBinding
    //kapt "com.android.databinding:compiler:${rootProject.android_plugin_version}"

    //MultiDex
    implementation "com.android.support:multidex:${rootProject.multidexVersion}"
    //fastJson
    implementation "com.alibaba:fastjson:${rootProject.fastJsonVersion}"

    implementation('com.tencent.qgame:utils:1.4.3', {
        exclude module: 'annotations'
        exclude group: "com.lucio.aspectjt"
    })
    implementation('com.tencent.qgame:wns:1.2.5',{
        exclude group: "com.lucio.aspectjt"
    })

    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    // If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'

    implementation 'com.jakewharton.rxbinding2:rxbinding:2.2.0'

    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

}

task getDebugPassWord << {
    println '--------------------------------getDebugPassWord start--------------------------------'
    def passWord = ''
    if (rootProject.file('private.properties').exists()) {
        Properties properties = new Properties()
        properties.load(rootProject.file('private.properties').newDataInputStream())
        passWord = properties.getProperty('debug.password')
    }
    if (!passWord?.trim()) {
        passWord = new String(System.console().readPassword("\n What's the secret password? "))
    }
    println "passWord = $passWord"
    println '--------------------------------getDebugPassWord end----------------------------------'
}

//tasks.whenTaskAdded { theTask ->
//    if (theTask.name.equals("packageDebug")) {
//        theTask.dependsOn "getDebugPassWord"
//    }
//}

