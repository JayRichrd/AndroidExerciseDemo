//gradle测试
//class HelloWorldPlugin implements Plugin<Project> {
//
//    @Override
//    void apply(Project target) {
//        println "Hello World"
//    }
//}
//
//apply plugin: HelloWorldPlugin

//apply plugin: 'com.cain.testplugin'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "cain.tencent.com.androidexercisedemo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //开启MultiDex
        multiDexEnabled true

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                cFlags "-DSTDC_HEADERS"
            }
        }
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    signingConfigs {
        release {
            android.signingConfigs.release.storePassword = 'jiangyu12315'
            android.signingConfigs.release.keyPassword = 'jiangyu12315'
        }
    }

    buildTypes {
        release {
            //shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //debug版
        debug {
            minifyEnabled false
            zipAlignEnabled false
            debuggable true
        }

//        staging {
//            applicationIdSuffix ".cain"
//            versionNameSuffix "-staging"
//        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main { jni.srcDirs = ['src/main/jni', 'src/main/cpp/'] }
    }

    dataBinding {
        enabled = true
    }

    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }
}

android.applicationVariants.all { variant ->
//    variant.outputs.all { output ->
//        def file = output.outputFile
////        outputFileName = "${variant.name}-${variant.versionName}.apk"
//        outputFileName = new File(file.parent, file.name.replace(".apk", "-${variant.versionName}.apk")).getName()
//    }
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", dependsOn: variant.install) {
            description "Install the ${variant.description} and runs the main launcher activity"
            doFirst {
                exec {
                    executable = 'adb'
                    args = ['shell', 'am', 'start', '-n', "${variant.applicationId}/.MyMainActivity"]
                }
            }
        }
    }
}


kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //support库
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.supportLibVersion}"

    // anko
    implementation "org.jetbrains.anko:anko-sdk25:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-appcompat-v7:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-design:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-recyclerview-v7:${rootProject.ankoVersion}"
    implementation "org.jetbrains.anko:anko-constraint-layout:${rootProject.ankoVersion}"

    // fresco
    implementation "com.facebook.fresco:fresco:${rootProject.fresco_version}"
    implementation "com.facebook.fresco:animated-gif:${rootProject.fresco_version}"
    implementation "com.facebook.fresco:animated-webp:${rootProject.fresco_version}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.rx_java_version}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.rx_android_version}"

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation project(':lintrulsaar')

    //dataBinding
    //kapt "com.android.databinding:compiler:${rootProject.android_plugin_version}"

    implementation 'com.tencent.qgame:widget:1.0.9'

    //MultiDex
    implementation "com.android.support:multidex:${rootProject.multidexVersion}"

    implementation "com.alibaba:fastjson:${rootProject.fastJsonVersion}"

//    implementation 'com.cain.android:AndroidSafeCallback:1.0.1'

//    debugImplementation 'com.facebook.flipper:flipper:0.14.1'
//    debugImplementation 'com.facebook.soloader:soloader:0.5.1'
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
//    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
//    implementation 'com.squareup.okhttp3:okhttp:3.6.0'

    //testCompile 'junit:junit:4.12'
    //androidTestCompile 'com.android.support.test:runner:1.0.1'
    //androidTestCompile 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task getDebugPassWord << {
    println '--------------------------------getDebugPassWord start--------------------------------'
    def passWord = ''
    if (rootProject.file('private.properties').exists()) {
        Properties properties = new Properties()
        properties.load(rootProject.file('private.properties').newDataInputStream())
        passWord = properties.getProperty('debug.password')
    }
    if (!passWord?.trim()) {
        passWord = new String(System.console().readPassword("\n What's the secret password? "))
    }
    println "passWord = $passWord"
    println '--------------------------------getDebugPassWord end----------------------------------'
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageDebug")) {
        theTask.dependsOn "getDebugPassWord"
    }
}
